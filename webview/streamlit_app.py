#streamlit_app.py

import streamlit as st
import requests
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from streamlit_lottie import st_lottie
import json
import os
from datetime import datetime

# Set the API URL
API_URL = os.getenv("API_URL", "http://web:8000/api/v1")
# Page config
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—é–º–µ", page_icon="üìä", layout="wide")

# Custom CSS
st.markdown("""
<style>
    .reportview-container {
        background: #f0f2f6
    }
    .sidebar .sidebar-content {
        background: #ffffff
    }
    .Widget>label {
        color: #31333F;
        font-weight: bold;
    }
    .stButton>button {
        color: #ffffff;
        background-color: #4CAF50;
        border-radius: 5px;
    }
    .stDataFrame {
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    h1, h2, h3 {
        color: #2C3E50;
    }
    .stPlotlyChart {
        background-color: white;
        border-radius: 5px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 10px;
    }
</style>
""", unsafe_allow_html=True)

# Load Lottie animation
@st.cache_data
def load_lottieurl(url: str):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

lottie_resume = load_lottieurl("https://assets9.lottiefiles.com/packages/lf20_5n8yfkac.json")

# Sidebar
with st.sidebar:
    st_lottie(lottie_resume, speed=1, height=200, key="resume_animation")
    st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—é–º–µ")
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑!")

# Main content
tab1, tab2, tab3 = st.tabs(["üìà –î–∞—à–±–æ—Ä–¥", "üìÑ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ", "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ–∑—é–º–µ"])

# Dashboard Tab
with tab1:
    st.header("üìä –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ")
    
    # Fetch all resumes
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        response = requests.get(f"{API_URL}/resumes/")
    
    if response.status_code == 200:
        resumes = response.json()
        df = pd.DataFrame(resumes)
        
        # Data cleaning and formatting
        df['predicted_salary'] = df['predicted_salary'].fillna(0).astype(float)
        df['formatted_salary'] = df['predicted_salary'].apply(lambda x: f"{x:,.2f} ‚ÇΩ")
        
        # Key Metrics
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("–í—Å–µ–≥–æ —Ä–µ–∑—é–º–µ", len(df))
        col2.metric("–°—Ä–µ–¥–Ω–∏–π –æ–ø—ã—Ç", f"{df['experience'].mean():.1f} –ª–µ—Ç")
        col3.metric("–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{df['predicted_salary'].mean():,.2f} ‚ÇΩ")
        col4.metric("–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", f"{df['is_remote'].sum()} ({df['is_remote'].mean()*100:.1f}%)")
        
        # Salary Distribution
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç")
        fig = px.histogram(df, x='predicted_salary', nbins=20, 
                           labels={'predicted_salary': '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞'},
                           title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç")
        fig.update_xaxes(ticksuffix=" ‚ÇΩ", tickformat=",.0f")
        fig.update_layout(bargap=0.1)
        st.plotly_chart(fig, use_container_width=True)
        
        # Experience vs Salary
        st.subheader("–û–ø—ã—Ç vs –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")
        fig = px.scatter(df, x='experience', y='predicted_salary', 
                         hover_data=['title'], 
                         labels={'experience': '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)', 'predicted_salary': '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞'},
                         title="–û–ø—ã—Ç vs –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")
        fig.update_yaxes(ticksuffix=" ‚ÇΩ", tickformat=",.0f")
        st.plotly_chart(fig, use_container_width=True)
        
        # Job Types
        st.subheader("–¢–∏–ø—ã —Ä–∞–±–æ—Ç—ã")
        job_type_counts = df['job_type'].value_counts()
        fig = px.pie(values=job_type_counts.values, names=job_type_counts.index, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã")
        st.plotly_chart(fig, use_container_width=True)
        
        # Seniority Levels
        st.subheader("–£—Ä–æ–≤–Ω–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
        seniority_counts = df['seniority_level'].value_counts()
        fig = px.bar(x=seniority_counts.index, y=seniority_counts.values, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
        fig.update_xaxes(title="–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
        fig.update_yaxes(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        st.plotly_chart(fig, use_container_width=True)
        
    else:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# Analyze Resume Tab
with tab2:
    st.header("üìÑ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF", type="pdf")

    if uploaded_file is not None:
        st.write("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:", uploaded_file.name)

        if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ..."):
                files = {"file": ("resume.pdf", uploaded_file.getvalue(), "application/pdf")}
                response = requests.post(f"{API_URL}/resumes/upload", files=files)

            if response.status_code == 200:
                result = response.json()
                st.success("–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")

                col1, col2 = st.columns(2)
                with col1:
                    st.subheader("–î–µ—Ç–∞–ª–∏ —Ä–µ–∑—é–º–µ")
                    st.write(f"**–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {result['title']}")
                    st.write(f"**–û–ø—ã—Ç:** {result['experience']} –ª–µ—Ç")
                    st.write(f"**–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {result['location']}")
                    st.write(f"**–¢–∏–ø —Ä–∞–±–æ—Ç—ã:** {result['job_type']}")
                    st.write(f"**–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:** {result['seniority_level']}")
                    st.write(f"**–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞:** {'–î–∞' if result['is_remote'] else '–ù–µ—Ç'}")
                
                with col2:
                    st.subheader("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã")
                    # Define a list of desired skills
                    desired_skills = ["Python", "Machine Learning", "Data Analysis", "SQL", "Deep Learning"]
                    
                    # Extract skills from the resume
                    resume_skills = set(result['key_skills'].split(', '))
                    
                    # Find missing skills
                    missing_skills = set(desired_skills) - resume_skills
                    
                    # Coursera course recommendations (you can expand this dictionary)
                    coursera_courses = {
                        "Python": "https://www.coursera.org/learn/python",
                        "Machine Learning": "https://www.coursera.org/learn/machine-learning",
                        "Data Analysis": "https://www.coursera.org/learn/data-analysis-with-python",
                        "SQL": "https://www.coursera.org/learn/sql-for-data-science",
                        "Deep Learning": "https://www.coursera.org/specializations/deep-learning"
                    }
                    
                    if missing_skills:
                        st.write("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤:")
                        for skill in missing_skills:
                            if skill in coursera_courses:
                                st.write(f"- [{skill}]({coursera_courses[skill]})")
                    else:
                        st.write("–£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏!")
                
                st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã")
                if result['predicted_salary']:
                    salary = result['predicted_salary']
                    fig = go.Figure(go.Indicator(
                        mode = "number+gauge+delta",
                        value = salary,
                        domain = {'x': [0, 1], 'y': [0, 1]},
                        title = {'text': "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"},
                        delta = {'reference': 100000},
                        gauge = {
                            'axis': {'range': [None, 200000]},
                            'bar': {'color': "#4CAF50"},
                            'steps': [
                                {'range': [0, 50000], 'color': "lightgray"},
                                {'range': [50000, 100000], 'color': "gray"}],
                            'threshold': {
                                'line': {'color': "red", 'width': 4},
                                'thickness': 0.75,
                                'value': 150000}}))
                    st.plotly_chart(fig)
                    st.write(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary:,.2f} ‚ÇΩ")
                else:
                    st.write("–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∑—é–º–µ.")
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# View All Resumes Tab
with tab3:
    st.header("üîç –í—Å–µ —Ä–µ–∑—é–º–µ")

    if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ"):
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ..."):
            response = requests.get(f"{API_URL}/resumes/")
        
        if response.status_code == 200:
            resumes = response.json()
            df = pd.DataFrame(resumes)
            
            # Data cleaning and formatting
            df['predicted_salary'] = df['predicted_salary'].fillna(0).astype(float)
            df['formatted_salary'] = df['predicted_salary'].apply(lambda x: f"{x:,.2f} ‚ÇΩ")
            
            # Translate column names
            df.columns = ['ID', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û–ø—ã—Ç', '–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–¢–∏–ø —Ä–∞–±–æ—Ç—ã', 
                          '–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏', '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞']
            
            # Display the dataframe
            st.dataframe(df[['–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û–ø—ã—Ç', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–¢–∏–ø —Ä–∞–±–æ—Ç—ã', '–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏', '–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞']], use_container_width=True)
            
            # Download CSV
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button(
                "–°–∫–∞—á–∞—Ç—å CSV",
                csv,
                "–¥–∞–Ω–Ω—ã–µ_—Ä–µ–∑—é–º–µ.csv",
                "text/csv",
                key='download-csv'
            )
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# Footer
st.markdown("---")
footer_col1, footer_col2 = st.columns(2)
with footer_col1:
    st.markdown("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –†–∏–∫–∞—Ä–¥–æ –°–∞–º–±—Ä–∞–Ω–æ")
with footer_col2:
    st.markdown(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")